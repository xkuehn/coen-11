Ways to check for errors in programs

	1. printf	- check vals of variables, inefficient way to find bugs (program might crash before printf writes to screen)
	   		 	- eventually have to clean up all printf statements
	
	2. assertions	- macro in assert.h, check truthfulness of statement, if not true it will not program and initiate
					segfault providing details of error
					- whenever you compile code you can override the assert to be an empty function so program doesn't lose efficienncy
					- once error is found, look at where assert failed then backtrace to error 

					#include <assert.h>
					
					int main(){
						int i = 1025;
						unsigned char c;
						c = (unsigned char) i; //c only has one byte, int has 4
						assert(c == 1025);
						assert(i == 1025);
					}

	3. GDB (GNU debugger)	- used to step through code one line at a time to tlook at what the program is doing in each line 
							of execution
							- use 'gcc <file> -g' to tell compiler to store info like where variables are stored
							- then run program using 'gdb ./a.out'
								* break/b: add using 'break <point in code>' or 'b <point in code>' (e.g. main)
								* run/r: runs program but stops if breakpoint added, shows line at breakpoint
								* display: use display <variable> to see value of given variable
								* next/n: shows next executed line, can use display again to see if val changed
								* continue/cont/c: will move to next breakpoint or error in code
								* list/l: will show all remaining lines in the program
								* print: to print all the variables that are currently stored
								* step: can step into desired function, use step <function>
								* info: can be used on several things, (e.g. info <variable name> shows info of variable)
							- if you find value of variable is wrong at certain line, you can go back and edit code
							- can also split screen so source code and GDB open at same time

							#include <stdio.h>									//compile code with '-g'
																				//set break at line 5: b 5
							int main(){											//run
								int i, num, j [ = 1];  							//use n to see next lines
								printf("Enter the number: ");					//use n and display to check for loop its.
								scanf("%d", &num);								//check variable values
																				//in ex. j is intialized to zero, should be 1
								for(int i = 0; i <[=] num; i++){				//bug found
									j = j*i;									//go back into code to fix error
								}												//solution in brackets
								
								printf("The factorial of %d is &d\n", num, j);
							}

	4. Valgrind 	- tell you about memory used in program (e.g. forgot to allocate/deallocate memory)
					- works like gdb in that you have to compile program with '-g' flag
					- use 'valgrind ./a.out', shows a summary of heap memory and errors
					- always fix one problem first then rerun valgrind (maybe add more flags to check for different things)
						* man valgrind: find info about all the different things valgrind can do
						* --leak-check=<no|summary|yes|full>: if set to yes of full shows details of each mem leak
						* --show-reachable=<yes|no>: shows memory that is still occupied at end of the program
						* --track-origins=<yes|no>:


						#include <stdio.h>										//using valgrind, it shows errors
						#include <stdlib.h>										//says invalid write of size 4
																				//problem in line 13, based in line 9
						int main(){												//invalied read of size 4 at line 18 
							int i, num, j = 1;  								//most likely array index error
							printf("Enter the number: ");						//leak summary: 24 bytes in 1 blocks
							scanf("%d", &num);									//didn't free memory before program end
					    	int * facts = malloc(sizeof(int) * num);			//invalid mem access fixed by using 'i - 1'
																				//use 'free' to free memory
							for(int i = 1; i <= num; i++){						//valgrind says all memory was freed
								j = j*i;										//code has no errors :)
								facts[i [- 1]] = j;						
							}												
							
							printf("The factorial of %d is &d\n", num, j);
							for(i = 1; i<=num; i++){
								printf("%d, ", facts[i [- 1]]);
							}

							[free(facts);]
						}